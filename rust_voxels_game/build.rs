use minetest_schematic::MTS;
use std::{
    collections::HashMap,
    env, fs,
    io::{self, Write},
    path::{Path, PathBuf},
    process::Command,
};

const CFLAGS: &[&str] = &[
    "-Os",
    "-g",
    "-Wall",
    "-std=c99",
    "-msoft-float",
    "-mno-string",
    "-mno-multiple",
    "-mno-vsx",
    "-mno-altivec",
    "-mlittle-endian",
    "-fno-stack-protector",
    "-mstrict-align",
    "-ffreestanding",
    "-fdata-sections",
    "-ffunction-sections",
    "-I../include",
];

fn prefix() -> &'static str {
    if env::var("HOST").unwrap() != "powerpc64le-linux-gnu" {
        "powerpc64le-linux-gnu-"
    } else {
        ""
    }
}

fn uart_bauds() -> u32 {
    let s = env::var_os("UART_BAUDS").unwrap_or_else(|| "115200".into());
    s.to_str().unwrap().parse().unwrap()
}

fn make_output_path(source: impl AsRef<Path>, extension: &str) -> PathBuf {
    let mut retval = PathBuf::from(env::var_os("OUT_DIR").unwrap());
    retval.push(source.as_ref().file_name().unwrap());
    retval.set_extension(extension);
    retval
}

fn gcc(source: impl AsRef<Path>) -> io::Result<()> {
    let source = source.as_ref();
    println!("cargo:rerun-if-changed={}", source.display());
    let target = make_output_path(source, "o");
    println!("cargo:rustc-link-arg={}", target.display());
    if !Command::new(format!("{}gcc", prefix()))
        .args(CFLAGS)
        .arg(format!("-DUART_BAUDS={}", uart_bauds()))
        .arg("-c")
        .arg("-o")
        .arg(&target)
        .arg(source)
        .status()?
        .success()
    {
        Err(io::Error::new(
            io::ErrorKind::Other,
            format!("failed to compile: {}", source.display()),
        ))
    } else {
        Ok(())
    }
}

fn embedded() -> io::Result<()> {
    gcc("head.S")?;
    gcc("../lib/console.c")?;
    println!("cargo:rustc-link-arg=-T");
    println!("cargo:rustc-link-arg=powerpc.lds");
    println!("cargo:rerun-if-changed=powerpc.lds");
    println!("cargo:rustc-link-arg=-nostartfiles");
    println!("cargo:rustc-link-arg=-static");
    Ok(())
}

fn generate_world(source: impl AsRef<Path>) -> io::Result<()> {
    let source = source.as_ref();
    println!("cargo:rerun-if-changed={}", source.display());
    let target = make_output_path(source, "rs");
    let mts = MTS::read(
        &mut io::BufReader::new(fs::File::open(source)?),
        MTS::MAX_NODE_COUNT,
    )?;
    let color_map: HashMap<&str, Option<(u8, u8, u8)>> = HashMap::from_iter([
        ("air", None),
        // colors from:
        // https://github.com/minetest/minetestmapper/blob/e14f27f41268a11c34299a8b94a380b28c6b71e9/colors.txt
        ("wool:black", Some((30, 30, 30))),
        ("wool:blue", Some((0, 73, 146))),
        ("wool:brown", Some((88, 44, 0))),
        ("wool:cyan", Some((0, 132, 140))),
        ("wool:dark_green", Some((33, 103, 0))),
        ("wool:dark_grey", Some((60, 60, 60))),
        ("wool:green", Some((93, 218, 28))),
        ("wool:grey", Some((133, 133, 133))),
        ("wool:magenta", Some((201, 3, 112))),
        ("wool:orange", Some((214, 83, 22))),
        ("wool:pink", Some((255, 133, 133))),
        ("wool:red", Some((170, 18, 18))),
        ("wool:violet", Some((93, 5, 169))),
        ("wool:white", Some((220, 220, 220))),
        ("wool:yellow", Some((254, 226, 16))),
    ]);
    let mut o = io::BufWriter::new(fs::File::create(target)?);
    writeln!(o, "// autogenerated from {}", source.display())?;
    writeln!(o, "use crate::{{world::Block, screen::RgbColor}};")?;
    writeln!(
        o,
        "pub const SCHEMATIC: &'static [[[Block; {}]; {}]; {}] = &[",
        mts.size_x, mts.size_y, mts.size_z
    )?;
    for z in 0..mts.size_z {
        writeln!(o, "    [")?;
        for y in 0..mts.size_y {
            writeln!(o, "        [")?;
            for x in 0..mts.size_x {
                let node = mts.nodes[mts.pos_to_node_index(x, y, z)];
                let node_kind = &*mts.node_names[node.name_id as usize];
                let Some(color) = color_map.get(node_kind) else {
                    return Err(io::Error::new(
                        io::ErrorKind::Other,
                        format!("unsupported node kind {node_kind:?}"),
                    ));
                };
                if let Some((r, g, b)) = *color {
                    writeln!(o, "            Block {{ color: Some(RgbColor {{ r: {r}, g: {g}, b: {b} }}.to_packed()) }},")?;
                } else {
                    writeln!(o, "            Block::default(),")?;
                }
            }
            writeln!(o, "        ],")?;
        }
        writeln!(o, "    ],")?;
    }
    writeln!(o, "];")?;
    drop(o.into_inner()?);
    Ok(())
}

fn common() -> io::Result<()> {
    generate_world("libre-soc-logo.mts")?;
    Ok(())
}

#[cfg(feature = "embedded")]
fn main() -> io::Result<()> {
    common();
    embedded()
}

#[cfg(feature = "hosted")]
fn main() -> io::Result<()> {
    let _ = embedded;
    common()
}
